{"id":454,"author_id":92,"title":"モナコインを送金する方法を調べた","content":"　[mpurse][], [mpchain][], [counterParty][], [counterBlock][] APIを使えば送金できるはず。その方法を調査してみる。\n\n[mpurse]:https://github.com/tadajam/mpurse\n[mpchain]:https://mpchain.info/doc\n[counterBlock]:https://counterparty.io/docs/counterblock_api/\n[counterParty]:https://counterparty.io/docs/api/\n\n<!-- more -->\n\n# 結論\n\n　トランザクション作成APIと思しき[create_send][]を[mpurse][]経由で実行するもエラーに阻まれてしまった。\n\n```javascript\nconst cpParams = {\n    source: 'MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu',\n    destination: 'MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu',\n    asset: 'MONA',\n    quantity: 0.00000000,\n    memo: null,\n    memo_is_hex: false,\n    fee_per_kb: 0,\n    allow_unconfirmed_inputs: true,\n    extended_tx_info: true,\n    disable_utxo_locks: true,\n};\nawait window.mpurse.counterParty('create_send', cpParams);\n//const unspentTxouts = await window.mpurse.counterParty('create_send', cpParams);\n```\n\n　実行したら以下のように怒られた。\n\n```javascript\n{\n    \"code\": -32000,\n    \"data\": {\n        \"args\": [\n            \"{\\\"message\\\": \\\"Error composing send transaction via API: Destination output is dust.\\\", \\\"code\\\": -32001}\"\n        ],\n        \"message\": \"{\\\"message\\\": \\\"Error composing send transaction via API: Destination output is dust.\\\", \\\"code\\\": -32001}\",\n        \"type\": \"Exception\"\n    },\n    \"message\": \"Server error\"\n}\n```\n\n　原因不明。以下URLによると手数料が少なすぎるせいかもしれない。仮にそうだとして、公式サイトなど信頼できる情報源からの情報を見つけられなかった。私がちゃんと読めてないのだろう。\n\n* https://bitcoin.stackexchange.com/questions/48235/what-is-the-minrelaytxfee\n\n　おそらく[mpchain][]なり[counterParty][]なりが最低手数料を算出しており、それより低いときのリクエストを弾いているのだと思われる。その値がわかれば解決するかもしれないが、どこにその情報があるかわからない。\n\n　送金APIについては実際に所持金が減るので、諸々ちゃんと把握してから実行したい。APIテスト環境でもあれば触りながら理解を深められそうだが、そういったものも見つけられなかった。自分のマシンにフルノードをインストールし、そのコードを解析すれば理解できると踏んでいるが、壮大すぎて読み解けると思えない。MasteringBitcoinも読了していないので、今の私にはまだ早すぎたのかもしれない。\n\n# 送金する方法\n\n　MasteringBitcoin日本語訳PDFを少し読んだことで、送金する仕組みを以下のように理解した。\n\n* 支払先アドレス、支払元アドレス、アセット（MONA）、支払額、手数料、メモを決める\n* 支払額＋手数料以上の額になるようUTXO(未使用アウトプットトランザクションデータ)を取得する\n* トランザクションを作成する\n\t* UXTOをvin（入力）として設定する\n\t* 支払をvout（出力）として設定する\n\t* おつりをvout（出力）として設定する\n* トランザクションを送信する\n\t* 未処理トランザクション用プールに入る\n\t* マイナーがそれを見つける\n\t* 手数料が一定値ならマイニングする\n\t* ブロックチェーンに取り込まれる\n\t* 未承認から承認済みトランザクションになり支払確定する\n\n## 予想\n\n　問題は、これをどのように実行するか。とりあえず実際に自分で使い、支払った実績のある[mpurse][]のソースコードを解析すれば、送金する方法がわかるはず。たぶんその中で[mpchain][], [counterBlock][], [counterParty][] APIを実行することで送金を実現していると思われる。つまり本体はWebAPIのはず。\n\n## 目標\n\n　送金するAPIはどれで、どのような引数や戻り値か。HTTPヘッダはどうすればいいか。などの情報を知りたい。最終的にJavaScriptのfetch APIでそれをリクエストし、[mpurse][]なしでモナコインの送金を実現したい。\n\n# API 物色\n\n* [mpurse][]\n* [mpchain][]\n* [counterBlock][]\n* [counterParty][]\n\n## [mpurse sendAsset][]\n\n[mpurse sendAsset]:https://github.com/tadajam/mpurse#sendasset\n\n　[mpurse sendAsset][] APIを使えば送金できる。[Mpurseを使ったモナコイン送金ボタンを生成する][]ツールを作ったとき、まさにこのAPIを使った。\n\n　たしかに送金はできるが、これはUIやトランザクション手数料の計算が固定されている。もっと自分好みにカスタマイズしたい。そこで送金処理だけを抽出したいと思ったのが今回の動機である。\n\n[Mpurseを使ったモナコイン送金ボタンを生成する]:https://ytyaru.github.io/Html.Mpurse.Send.Button.Generator.20220626095139/\n\n## [mpurse sendRawTransaction][]\n\n[mpurse sendRawTransaction]:https://github.com/tadajam/mpurse#sendrawtransaction\n[mpurse signRawTransaction]:https://github.com/tadajam/mpurse#signrawtransaction\n\n　MasteringBitcoin日本語訳PDFにより、送金とはトランザクション情報の送信であると知った。なら、[mpurse sendRawTransaction][] APIで送金できるのでは？\n\n　READMEにはAPI以外の情報がなかったので「sendRawTransaction」でググってみると以下がヒット。別のコイン（イーサリアム）の情報っぽい。\n\n* https://scrapbox.io/sushiether/web3.js@0.2x.x_web3.eth.sendRawTransaction\n\n> 署名済みのトランザクションを送信します\n\n　ということらしい。\n\n　いまだに署名とやらをちゃんと理解できていないのだが、文脈から察するに、送信する前に署名が必要らしい。\n\n　そこでREADMEでAPIをさがしてみると[mpurse signRawTransaction][]があった。\n\n```javascript\nconst signedTx = await window.mpurse.signRawTransaction(tx);\nconst txHash = await window.mpurse.sendRawTransaction(signedTx);\n```\n\n　[mpurse sendRawTransaction]で返された`txHash`を[trezor tx][]のURLの末尾につければ、そのトランザクションの情報がゲットできる、のかな？\n\n[trezor tx]:https://github.com/trezor/blockbook/blob/master/docs/api.md#get-transaction\n\n　問題は[mpurse signRawTransaction][]の引数`tx`に何を渡せばいいのか。無情にもREADMEには`tx: string`としか書いていない。ならその文字列に何を渡せばいいの？　ググったページには以下のように書いてあった。\n\n```javascript\n...\nvar rawTx = {\n  nonce: '0x00',\n  gasPrice: '0x09184e72a000', \n  gasLimit: '0x2710',\n  to: '0x0000000000000000000000000000000000000000', \n  value: '0x00', \n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'\n}\n \nvar tx = new Tx(rawTx);\ntx.sign(privateKey);\n \nvar serializedTx = tx.serialize();\n\nweb3.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function(err, hash) {\n...\n```\n\n　`rawTx`というオブジェクトを`Tx`なるクラスに渡し、`sign`メソッドにかけ、さらに`serialize`した結果を16進数化している、のかな？\n\n　何がなんだかさっぱり。少なくともこのコードをそのまま使うことはできなさそう。たぶんこのうちいくつかは[mpurse signRawTransaction][]と[mpurse sendRawTransaction][]で実現できると思いたい。ただ、トランザクション情報を作成するとき、どんな情報をどのように与えればいいかさっぱりわからない。具体的にいうと[mpurse signRawTransaction][]の引数`tx`がわからない。\n\n　これなら[mpurse sendAsset][]のソースコードを読んだほうがいいかもしれない。\n\n　一応ほかにも以下のようなサイトはあった。別のコイン（イーサリアム）の情報だった。やはり`gasPrice`などの情報を入れている。\n\n* https://blog.katastros.com/a?ID=00800-4487ef92-cf8f-4e35-8b0f-cd8422a2b3f4\n\n　驚くほど情報が少ない。ググり方が悪いのかな？\n\n## [counterParty][] API\n\n　`send`をキーワードに検索してみた。すると以下のようなコード例があった。\n\n```python\ndef do_send(source, destination, asset, quantity, fee, encoding):\n    validateaddress = bitcoin_api('validateaddress', [source])\n    assert validateaddress['ismine']\n    pubkey = validateaddress['pubkey']\n    unsigned_tx = counterparty_api('create_send', {'source': source, 'destination': destination, 'asset': asset, 'quantity': quantity, 'pubkey': pubkey, 'allow_unconfirmed_inputs': True})\n    signed_tx = bitcoin_api('signrawtransaction', [unsigned_tx])['hex']\n    tx_hash = bitcoin_api('sendrawtransaction', [signed_tx])\n    return tx_hash\n```\n\n1. [create_send][] APIで`signrawtransaction` APIの引数を作成する\n1. `signrawtransaction` APIで`sendrawtransaction`の引数を作成する\n\n[create_send]:https://counterparty.io/docs/api/#create_send\n\n　ということらしい。つまり、以下のような流れかな？\n\n1. [create_send][] APIを実行する\n1. 1の戻り値を[mpurse signRawTransaction][]の引数として渡して実行する\n1. 2の戻り値を[mpurse sendRawTransaction][]の引数として渡して実行する\n1. 以上で送金完了\n1. 3の戻り値を[trezor tx][]のURL末尾にして実行すると送金トランザクション情報を入手できる\n\n　最初の[create_send][]をみてみよう。\n\n```javascript\ncreate_send(source, destination, asset, quantity)\n```\n\n引数|型|概要\n----|--|----\nsource|string|The address that will be sending (must have the necessary quantity of the specified asset).\ndestination|(string, array[string])|The address to receive the asset.\nasset|(string, array[string])|The asset or subasset to send.\nquantity|(integer, array[integer])|The quantities of the asset to send.\nmemo|(string, optional)|The Memo associated with this transaction.\nmemo_is_hex|(boolean, optional)|If this is true, interpret the memo as a hexadecimal value. Defaults to false.\nuse_enhanced_send|(boolean, optional)|If this is false, the construct a legacy transaction sending bitcoin dust. Defaults to true.\n\n　さらに以下も参照しろとのこと。\n\n* https://counterparty.io/docs/api/#advanced-create_-parameters\n\n　するとアホみたいに大量の引数らしきものが。\n\n引数|型|概要\n----|--|----\nencoding|(string)|The encoding method to use, see transaction encodings for more info.\npubkey|(string/list)|The hexadecimal public key of the source address|(or a list of the keys, if multi‐sig). Required when using encoding parameter values of multisig or pubkeyhash. See transactions encoding for more info\nallow_unconfirmed_inputs|(boolean)|Set to true to allow this transaction to utilize unconfirmed UTXOs as inputs. Defaults to false.\nfee|(integer)|If you’d like to specify a custom miners’ fee, specify it here|(in satoshi). Leave as default for the server to automatically choose.\nfee_per_kb|(integer)|The fee per kilobyte of transaction data constant that the server uses when deciding on the dynamic fee to use|(in satoshi).\nfee_provided|(integer)|If you would like to specify a maximum fee|(up to and including which may be used as the transaction fee), specify it here|(in satoshi). This differs from fee in that this is an upper bound value, which fee is an exact value.\ncustom_inputs|(list)|Use only these specific UTXOs as inputs for the transaction being created. If specified, this parameter is a list of|(JSON-encoded) UTXO objects, whose properties match those as retrieved by listunspent function from bitcoind|(e.g. see here). Note that the actual UTXOs used may be a subset of this list.\nunspent_tx_hash|(string)|When compiling the UTXOs to use as inputs for the transaction being created, only consider unspent outputs from this specific transaction hash. Defaults to null to consider all UTXOs for the address. Do not use this parameter if you are specifying custom_inputs.\nregular_dust_size|(integer)|Specify|(in satoshi) to override the|(dust) amount of BTC used for each non-(bare) multisig output. Defaults to 5430 satoshi.\nmultisig_dust_size|(integer)|Specify|(in satoshi) to override the|(dust) amount of BTC used for each|(bare) multisig output. Defaults to 7800 satoshi.\ndust_return_pubkey|(string)|The dust return pubkey is used in multi-sig data outputs|(as the only real pubkey) to make those the outputs spendable. By default, this pubkey is taken from the pubkey used in the first transaction input. However, it can be overridden here|(and is required to be specified if a P2SH input is used and multisig is used as the data output encoding.) If specified, specify the public key|(in hex format) where dust will be returned to so that it can be reclaimed. Only valid/useful when used with transactions that utilize multisig data encoding. Note that if this value is set to false, this instructs counterparty-server to use the default dust return pubkey configured at the node level. If this default is not set at the node level, the call will generate an exception.\ndisable_utxo_locks|(boolean)|By default, UTXO’s utilized when creating a transaction are “locked” for a few seconds, to prevent a case where rapidly generating create_ calls reuse UTXOs due to their spent status not being updated in bitcoind yet. Specify true for this parameter to disable this behavior, and not temporarily lock UTXOs.\nop_return_value|(integer)|The value|(in satoshis) to use with any OP_RETURN outputs in the generated transaction. Defaults to 0. Don’t use this, unless you like throwing your money away.\nextended_tx_info|(boolean)|When this is not specified or false, the create_ calls return only a hex-encoded string. If this is true, the create_ calls return a data object with the following keys: tx_hex, btc_in, btc_out, btc_change, and btc_fee.\np2sh_pretx_txid|(string)|The previous transaction txid for a two part P2SH message. This txid must be taken from the signed transaction.\n\n　[create_send][] APIにはそれらを受け取る引数がなさそうに見えるけど。どういうこと？\n\n　[counterBlock][] APIのほうは`send`でググってもヒットしなかった。サイトから得られる情報はこんなところが限界か。\n\n# コードリーディング\n\n　[mpurseのコードからsendをキーワードに検索してみた。][mpurse search]\n\n[mpurse search]:https://github.com/tadajam/mpurse/search?q=send\n\n## [src/app/components/send/send.component.ts][]\n\n[src/app/components/send/send.component.ts]:https://github.com/tadajam/mpurse/blob/851bf8fd1db5ae8094caeb304881caea20a11649/src/app/components/send/send.component.ts\n\n　送金フォームの送金ボタンを押したとき、トランザクションデータを作成する処理と思われる。が、さっぱりわからない。\n\n　`createSend`のようなそれっぽいキーワードがあるので関係あるはず。\n\n```javascript\n  createSendObservable(disableUtxoLocks: boolean): Observable<any> {\n    return this.backgroundService.getAsset(this.assetControl.value).pipe(\n      flatMap(assetInfo => {\n        let amount: number;\n        if (assetInfo['divisible']) {\n          amount = new Decimal(this.amountControl.value)\n            .times(new Decimal(100000000))\n            .toNumber();\n        } else {\n          amount = new Decimal(this.amountControl.value).toNumber();\n        }\n        return this.backgroundService.createSend(\n          this.fromControl.value,\n          this.toControl.value,\n          this.assetControl.value,\n          amount,\n          this.memoTypeControl.value === 'no'\n            ? ''\n            : this.memoValueControl.value,\n          this.memoTypeControl.value === 'hex',\n          new Decimal(this.feeControl.value)\n            .times(new Decimal(1000))\n            .toNumber(),\n          disableUtxoLocks\n        );\n      })\n    );\n  }\n```\n```javascript\n  createSend(): void {\n    this.unsignedTx = '';\n    this.calculatedFee = 0;\n    this.createSendObservable(true).subscribe({\n      next: result => {\n        this.zone.run(() => {\n          this.unsignedTx = result.tx_hex;\n          this.calculatedFee = result.btc_fee;\n        });\n      },\n      error: error => {\n        this.zone.run(() => {\n          this.snackBar.open(this.backgroundService.interpretError(error), '', {\n            duration: 3000\n          });\n        });\n      }\n    });\n  }\n```\n```javascript\n  send(): void {\n    if (this.request) {\n      this.createSendObservable(false)\n        .pipe(\n          flatMap(result => this.backgroundService.send(result.tx_hex)),\n          flatMap(result =>\n            this.backgroundService.shiftRequest(true, this.id, {\n              txHash: result.tx_hash\n            })\n          )\n        )\n        .subscribe({\n          next: () => this.backgroundService.closeWindow(),\n          error: error =>\n            this.zone.run(() =>\n              this.snackBar.open(error.toString(), '', { duration: 3000 })\n            )\n        });\n    } else {\n      this.createSendObservable(false)\n        .pipe(flatMap(result => this.backgroundService.send(result.tx_hex)))\n        .subscribe({\n          next: result => {\n            this.zone.run(() => {\n              this.snackBar.open(\n                this.translate.instant('send.sent') + result.tx_hash,\n                '',\n                { duration: 5000, panelClass: 'break-all' }\n              );\n              this.router.navigate(['/home']);\n            });\n          },\n          error: error => {\n            this.zone.run(() => {\n              this.snackBar.open(\n                this.backgroundService.interpretError(error),\n                '',\n                { duration: 3000 }\n              );\n            });\n          }\n        });\n    }\n  }\n```\n\n## [src/app/services/background.service.ts createSend][]\n\n[src/app/services/background.service.ts createSend]:https://github.com/tadajam/mpurse/blob/851bf8fd1db5ae8094caeb304881caea20a11649/src/app/services/background.service.ts#L275\n\n```javascript\n  createSend(\n    source: string,\n    destination: string,\n    asset: string,\n    quantity: number,\n    memo: string,\n    memoIsHex: boolean,\n    feePerKb: number,\n    disableUtxoLocks: boolean\n  ): Observable<any> {\n    return this.getBackground().pipe(\n      flatMap(bg =>\n        from<Observable<any>>(\n          bg.createSend(\n            source,\n            destination,\n            asset,\n            quantity,\n            memo,\n            memoIsHex,\n            feePerKb,\n            disableUtxoLocks\n          )\n        )\n      )\n    );\n  }\n```\n\n　おや、この引数の感じ、どこかで見覚えが。[counterParty][]の[create_send][]がこんな感じだったような。\n\n### [extension_scripts/background.ts createSend][]\n\n[extension_scripts/background.ts createSend]:https://github.com/tadajam/mpurse/blob/851bf8fd1db5ae8094caeb304881caea20a11649/extension_scripts/background.ts#L893\n\n```javascript\n  createSend(\n    source: string,\n    destination: string,\n    asset: string,\n    quantity: number,\n    memo: string,\n    memoIsHex: boolean,\n    feePerKb: number,\n    disableUtxoLocks: boolean\n  ): Promise<any> {\n    return MpchainUtil.createSend(\n      source,\n      destination,\n      asset,\n      quantity,\n      memo,\n      memoIsHex,\n      feePerKb,\n      disableUtxoLocks\n    );\n  }\n}\n```\n\n　[mpchain][] APIで実行しているっぽい。でもドキュメントにはそれっぽいAPIがない。コードを追ってみよう。\n\n### [extension_scripts/util.mpchain.ts createSend][]\n\n[extension_scripts/util.mpchain.ts createSend]:https://github.com/tadajam/mpurse/blob/851bf8fd1db5ae8094caeb304881caea20a11649/extension_scripts/util.mpchain.ts#L235\n\n```javascript\n  static createSend(\n    source: string,\n    destination: string,\n    asset: string,\n    quantity: number,\n    memo: string,\n    memoIsHex: boolean,\n    feePerKb: number,\n    disableUtxoLocks: boolean\n  ): Promise<any> {\n    const cpParams = {\n      source: source,\n      destination: destination,\n      asset: asset,\n      quantity: quantity,\n      memo: memo,\n      memo_is_hex: memoIsHex,\n      fee_per_kb: feePerKb,\n      allow_unconfirmed_inputs: true,\n      extended_tx_info: true,\n      disable_utxo_locks: disableUtxoLocks\n    };\n    return this.cp('create_send', cpParams);\n  }\n```\n\n　[counterParty][] APIで実行しているっぽい。これが本体か。\n\n## [extension_scripts/background.ts send][]\n\n[extension_scripts/background.ts send]:https://github.com/tadajam/mpurse/blob/851bf8fd1db5ae8094caeb304881caea20a11649/extension_scripts/background.ts#L210\n\n```javascript\n  async send(tx: string): Promise<any> {\n    if (!this.isUnlocked) {\n      this.resetPreferences();\n      this.resetKeyring();\n      Promise.reject('Not logged in');\n    } else {\n      const hex = await this.keyring.signTransaction(\n        tx,\n        this.preferences.selectedAddress\n      );\n      return MpchainUtil.sendTx(hex);\n    }\n  }\n```\n\n　[mpchain][] APIの`send_tx`を使っているっぽい。たぶん引数は`createSend`の戻り値だろう。\n\n# どうすればいいのか\n\n　[counterParty][]の[create_send][]([mpurse][]の`createSend`)してから[mpchain][]の`send_tx`([mpurse][]の`send`)することで送金を実現しているような気がする。\n\n　まずは[create_send][]のほうから試してみよう。[mpurse][] API経由で実行すると楽。以下のようにやってみた。\n\n　[ytyaruのプロフィール][]のようなHTTPSページでデベロッパツールを開き、コンソールに以下コードを入力することで実行した。\n\n[ytyaruのプロフィール]:https://ytyaru.github.io/\n\n```javascript\nconst cpParams = {\n    source: 'MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu',\n    destination: 'MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu',\n    asset: 'MONA',\n    quantity: 0.00000000,\n    memo: null,\n    memo_is_hex: false,\n    fee_per_kb: 0,\n    allow_unconfirmed_inputs: true,\n    extended_tx_info: true,\n    disable_utxo_locks: true,\n};\nawait window.mpurse.counterParty('create_send', cpParams);\n//const unspentTxouts = await window.mpurse.counterParty('create_send', cpParams);\n```\n\n　実行したら以下のように怒られた。\n\n```javascript\n{\n    \"code\": -32000,\n    \"data\": {\n        \"args\": [\n            \"{\\\"message\\\": \\\"Error composing send transaction via API: Destination output is dust.\\\", \\\"code\\\": -32001}\"\n        ],\n        \"message\": \"{\\\"message\\\": \\\"Error composing send transaction via API: Destination output is dust.\\\", \\\"code\\\": -32001}\",\n        \"type\": \"Exception\"\n    },\n    \"message\": \"Server error\"\n}\n```\n\n　以下を読むに、手数料が安すぎてゴミだよってことかもしれない。\n\n* https://bitcoin.stackexchange.com/questions/48235/what-is-the-minrelaytxfee\n\n　なら、適切な手数料というのはどうしたら算出できるの？　だれが決めているの？\n\n　たぶんこの場合は[mpchain][]か[counterParty][]が決めているのだろう。せめて弾かれる最低額を知りたい。そもそも、通貨の単位もよくわからない。モナなのかサトシなのかワタナベなのか。\n\n　手数料には謎がたくさんあって未だにわからないことが多い。やはり送金の壁は高かった。\n\n　APIのテストができる環境とかがあれば触りながら理解を深められそうなのだが。そんな便利なものは見つけられなかった。\n\n### 先の予想\n\n　たぶんこの[create_send][]でトランザクション情報を作成したあと、どうにかしてブロックチェーンに取り込んでくれるよう要求するのだろう。そのときフルノードなサーバのメモリ上にプールされ、未承認状態トランザクションになる。そしてマイナーがそのトランザクションをマイニングし終えた時点でブロックチェーンに取り込まれ、そこで承認済みトランザクションとして取引が確定するのだろう。\n\n　今回はトランザクションを作成する時点でエラーになったので、まだブロックチェーンに取り込むよう要求する前の段階だと思われる。仮に[create_send][]が終わっても、まだ先がある。無謀な挑戦だったか。","sent_mona":0,"access":217,"ogp_path":"https://monaledge.com/1658283590367.png","category":3,"createdAt":"2022-07-20T02:19:50.531Z","updatedAt":"2022-10-09T01:11:32.599Z","user":{"id":92,"name":"ytyaru","icon_image_path":"https://monaledge.com:8443/articleImages/1652177650934ytyaru.png","address":"MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu","createdAt":"2022-05-02T10:03:17.751Z","updatedAt":"2022-05-10T10:14:11.115Z"},"comments":[{"id":211,"from":52,"article_id":454,"comment":"フルノードを立てずにでしたらこのあたりでしょうか\nhttps://qiita.com/cryptcoin-junkey/items/fc6d62c22d4444d98c45\n\nあとは各ウォレット（Monapaletteやもにゃ等）のソース等も大変参考になります。","createdAt":"2022-07-21T03:03:00.378Z","updatedAt":"2022-07-21T03:03:00.378Z","user":{"id":52,"name":"コタロ@駆け出し100兆MONAほしい侍","icon_image_path":"https://monaledge.com:8443/articleImages/1619234990674EL-n3CLUcAUoxrc.jpg","address":"MSgQuJGBkbnnV9i6ZozUfaRNmkq9j5tL3W","createdAt":"2021-04-24T03:29:02.181Z","updatedAt":"2021-11-21T04:46:08.779Z"}},{"id":212,"from":92,"article_id":454,"comment":"情報ありがとうございます！　色々な方法があるのですね。\nもっと単純にWebAPI一発でいけるかと思ってたのですが甘かったようです。\nソースコードは見つけましたが使ったことがないアプリな上にmpurseより複雑そう。私にはまだ難しそうな予感。いつか読み解きたいところです。\nhttps://bitbucket.org/anipopina/monapalette/commits/\nhttps://github.com/monya-wallet/monya","createdAt":"2022-07-25T00:58:49.006Z","updatedAt":"2022-07-25T00:58:49.006Z","user":{"id":92,"name":"ytyaru","icon_image_path":"https://monaledge.com:8443/articleImages/1652177650934ytyaru.png","address":"MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu","createdAt":"2022-05-02T10:03:17.751Z","updatedAt":"2022-05-10T10:14:11.115Z"}},{"id":210,"from":92,"article_id":454,"comment":"情報ありがとうございます！\n\nテスト環境あったのですね。testnet, mainnetというキーワードを教えていただけたので調べられそうです。少し調べた限り今の私には難しそうですが。\n\nトランザクション作成までならMONA消費なしでできるのですね。そうおっしゃっていただけると安心して試せます。そのうちまたAPIをいじってみようと思います。","createdAt":"2022-07-21T00:50:39.680Z","updatedAt":"2022-07-21T00:50:39.680Z","user":{"id":92,"name":"ytyaru","icon_image_path":"https://monaledge.com:8443/articleImages/1652177650934ytyaru.png","address":"MEHCqJbgiNERCH3bRAtNSSD9uxPViEX1nu","createdAt":"2022-05-02T10:03:17.751Z","updatedAt":"2022-05-10T10:14:11.115Z"}},{"id":209,"from":93,"article_id":454,"comment":"トランザクションを作成する機能は counterparty-server 側の API にあります。counterblock にはありません。\nAPI で無事トランザクションが生成されても無署名なのでブロックチェーンに投げ込んでも、無効扱いされ、手持ちの MONA は消えません。秘密鍵による署名が完了するまでは気軽に試しても問題ありません。testnet の API は存在しますが、testnet の MONA の入手は難しく、mainnet で試したほうが手間が少ないと思います。","createdAt":"2022-07-20T07:13:23.039Z","updatedAt":"2022-07-20T07:13:23.039Z","user":{"id":93,"name":"anonymous","icon_image_path":null,"address":"MUqM2tDnZXtJ4h87W2g8fFz9nW3GsYhMfu","createdAt":"2022-05-19T00:31:30.719Z","updatedAt":"2022-05-19T00:31:30.719Z"}}]}
